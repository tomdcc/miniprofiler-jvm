/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id "com.bmuschko.cargo" version "2.9.0" apply false
    id "io.ratpack.ratpack-java" version "1.10.0-milestone-8" apply false
}

apply from: 'gradle/dependencies.gradle'

allprojects {
    group = 'io.jdev.miniprofiler'
    version = '0.9'
}

ext {
    isSnapshot = version.endsWith("-SNAPSHOT")
    isCI = System.getenv("CI")

    publishedModules = [
        ':miniprofiler-core',
        ':miniprofiler-servlet',
        ':miniprofiler-javaee',
        ':miniprofiler-grails',
        ':miniprofiler-ratpack',
        ':miniprofiler-jooq',
        ':miniprofiler-test-support',
        ':doc:manual'
    ]
}

subprojects {
    if (path in publishedModules) {
        apply from: "$rootDir/gradle/publish.gradle"
    }
}

task resolveAllDependencies {
    doLast {
        gradle.allprojects { project ->
            project.configurations.all { c ->
                if (c.canBeResolved && (!c.name.startsWith('gretty') || c.name == 'grettyRunnerJetty7')) {
                    c.resolve()
                }
            }
        }
    }
}

def buildScansEnabled = isCI || project.hasProperty('enableBuildScans') && project.property('enableBuildScans') == 'true'
if (buildScansEnabled) {
    buildScan {
        termsOfServiceUrl = 'https://gradle.com/terms-of-service'
        termsOfServiceAgree = 'yes'

        publishAlwaysIf(project.hasProperty('alwaysPublishBuildScans') && project.property('alwaysPublishBuildScans') == 'true')

        if (isCI) {
            publishOnFailure()
            tag "CI"
            link "Travis Build", "https://travis-ci.org/${System.getenv('TRAVIS_REPO_SLUG')}/builds/${System.getenv('TRAVIS_BUILD_ID')}"
            value "Build Number", System.getenv("TRAVIS_BUILD_NUMBER")
            value "Build ID", System.getenv('TRAVIS_BUILD_ID')
            value "Git Commit ID", System.getenv("TRAVIS_COMMIT")
        } else {
            tag "LOCAL"
            try {
                value "Git Commit ID", 'git rev-parse --verify HEAD'.execute().text.trim()
            } catch (ignore) {
                // ignore
            }
            try {
                def status = 'git status --porcelain'.execute().text
                if (status) {
                    tag "dirty"
                    value "Git Status", status
                }
            } catch (ignore) {
                // ignore
            }
        }
    }
}
