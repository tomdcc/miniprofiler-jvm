buildscript {
	repositories {
		jcenter()
	}

	dependencies {
		classpath 'com.bmuschko:gradle-cargo-plugin:2.1.1'
	}
}

apply plugin: 'war'
apply plugin: 'com.bmuschko.cargo'

sourceCompatibility = 1.7
targetCompatibility = 1.7

dependencies {
	compileOnly 'javax:javaee-api:7.0'

	def cargoVersion = '1.4.15'
	cargo "org.codehaus.cargo:cargo-core-uberjar:$cargoVersion"
	cargo "org.codehaus.cargo:cargo-ant:$cargoVersion"
	cargo 'com.h2database:h2:1.3.173'

}

test {
	systemProperties "geb.build.reportsDir": "$reporting.baseDir/geb"
}

def glassfishBaseDir = file("$buildDir/glassfish")
task glassfishDir {
    doLast {
        glassfishBaseDir.mkdirs()
    }
}

[cargoRunLocal, cargoStartLocal]*.dependsOn([':miniprofiler-core:assemble', assemble, glassfishDir])

test.dependsOn(cargoStartLocal)
cargoStartLocal.finalizedBy(cargoStopLocal)
cargoStopLocal.mustRunAfter(test)

// this sometimes hasn't cleaned up a process that uses the same port in time
cargoStartLocal.shouldRunAfter(':integration-test:servlet:test')

cargo {
	containerId = 'glassfish4x'
	port = 8081
	deployable {
		context = '/'
	}

	local {
		installer {
			installUrl = 'http://download.java.net/glassfish/4.1.1/release/glassfish-4.1.1.zip'
			downloadDir = rootProject.file(".gradle/cache/cargo")
			extractDir = buildDir
		}

		configHomeDir = buildDir
		homeDir = glassfishBaseDir

		containerProperties {
			property 'cargo.datasource.datasource1', 'cargo.datasource.jndi=jdbc/DataSource|cargo.datasource.url=jdbc:h2:mem:miniprofiler;DB_CLOSE_DELAY=-1|cargo.datasource.driver=org.h2.Driver|cargo.datasource.username=sa|cargo.datasource.password=sa'
			if(project.hasProperty('debugCargo')) {
				property 'cargo.glassfish.domain.debug', 'true'
			}
		}

		file {
			file = configurations.cargo.files.find { it.name.startsWith('h2-') }
			toDir = new File("cargo-domain/lib")
		}
	}
}

idea {
	module {
		jdkName = '1.7'
	}
}
