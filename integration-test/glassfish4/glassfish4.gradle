/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply from: "$rootDir/gradle/javaModule.gradle"
apply from: "$rootDir/gradle/targetJdk8.gradle"
apply from: "$rootDir/gradle/browserTest.gradle"
apply from: "$rootDir/gradle/cargoTest.gradle"

dependencies {
    compile project(':miniprofiler-javaee')
    compile project(':miniprofiler-servlet')

    testCompile project(':miniprofiler-test-support')
}

def glassfishBaseDir = file("$buildDir/glassfish")
task glassfishDir {
    doLast {
        glassfishBaseDir.mkdirs()
    }
}
[cargoRunLocal, cargoStartLocal]*.dependsOn(glassfishDir)

// this sometimes hasn't cleaned up a process that uses the same port in time
cargoStartLocal.shouldRunAfter(':integration-test:servlet:test')

cargo {
	containerId = 'glassfish4x'
	port = 8081
	deployable {
		context = '/'
	}

	local {
		installer {
			installUrl = 'https://download.java.net/glassfish/4.1.1/release/glassfish-4.1.1.zip'
			downloadDir = rootProject.file(".gradle/cache/cargo")
			extractDir = buildDir
		}

		configHomeDir = buildDir
		homeDir = glassfishBaseDir

		containerProperties {
			property 'cargo.datasource.datasource1', 'cargo.datasource.jndi=jdbc/DataSource|cargo.datasource.url=jdbc:h2:mem:miniprofiler;DB_CLOSE_DELAY=-1|cargo.datasource.driver=org.h2.Driver|cargo.datasource.username=sa|cargo.datasource.password=sa'
			if(project.hasProperty('debugCargo')) {
				property 'cargo.glassfish.domain.debug', 'true'
			}
		}

		file {
			file = configurations.cargo.files.find { it.name.startsWith('h2-') }
			toDir = new File("cargo-domain/lib")
		}
	}
}
