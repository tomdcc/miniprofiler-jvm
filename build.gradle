buildscript {
	repositories {
		maven { url 'http://repo.springsource.org/plugins-release' }
	}
	dependencies {
		classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.4'
	}
}

subprojects {

    apply plugin: 'java'
    apply plugin: 'groovy'
	apply plugin: 'propdeps'

	// IDE support
    apply plugin: 'idea'
	apply plugin: 'eclipse'
	apply plugin: 'propdeps-idea'
	apply plugin: 'propdeps-eclipse'

	group = 'io.jdev.miniprofiler'
    version = '0.4-SNAPSHOT'

	repositories {
        mavenCentral()
    }

	test {
		systemProperties "geb.build.reportsDir": "$reporting.baseDir/geb"
		testLogging {
			exceptionFormat = 'full'
		}
	}

	ext {
		groovyVersion = "2.1.6"
		gebVersion = '0.9.1'
		seleniumVersion = "2.41.0"
		spockVersion = "0.7-groovy-2.0"

		isSnapshot = version.endsWith("-SNAPSHOT")

		publishedModules = [':miniprofiler-core', ':miniprofiler-javaee', ':miniprofiler-test-support']
		javaeeTestModules = ['glassfish4', 'wildfly8']
	}

	dependencies {
		testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
		testCompile "org.spockframework:spock-core:$spockVersion"
	}

	if (path in publishedModules) {
		apply plugin: "base"
		apply plugin: "maven"
		apply plugin: "signing"

		signing {
			sign configurations.archives
			required { !isSnapshot && gradle.taskGraph.hasTask(uploadArchives) }
		}

		task javadocJar(type: Jar, dependsOn: javadoc) {
			classifier = 'javadoc'
			from 'build/docs/javadoc'
		}

		task sourcesJar(type: Jar) {
			from sourceSets.main.allSource
			classifier = 'sources'
		}

		artifacts {
			archives jar
			archives javadocJar
			archives sourcesJar
		}

		apply from: "$rootDir/gradle/pom.gradle"

		uploadArchives { task ->
			repositories.mavenDeployer {
				if(!isSnapshot) {
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
				}
				uniqueVersion = false
				gradle.taskGraph.whenReady { taskGraph ->
					if (taskGraph.hasTask(task)) {
						repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
							authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
						}
						snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
							authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
						}
					}
				}
			}
		}

		task uploadSnapshots << {
			if(!isSnapshot) {
				println "Not uploading snapshot as not a snapshot version"
			}
		}
		if(isSnapshot) {
			uploadSnapshots.dependsOn(uploadArchives)
		}

	}

	if(path.startsWith(':integration-test')) {
		dependencies {
			compile project(':miniprofiler-core')
			testCompile project(':miniprofiler-test-support')

			// If using Spock, need to depend on geb-spock
			testCompile "org.gebish:geb-spock:$gebVersion"

			// Need a driver implementation
			testRuntime("com.github.detro.ghostdriver:phantomjsdriver:1.1.0") {
				exclude module: "selenium-java"
			}
			testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
			testRuntime "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
		}
	}
	if(name in javaeeTestModules) {
		dependencies {
			compile project(':miniprofiler-javaee')
		}
	}
}

allprojects {
	task resolveAllDependencies {
		doLast {
			configurations.all { it.resolve() }
		}
	}
}
