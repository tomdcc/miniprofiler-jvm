plugins {
    id 'com.gradle.build-scan' version '1.8'
}

apply plugin: 'idea'
subprojects {

    apply plugin: 'java'
    apply plugin: 'groovy'
	apply from: "$rootDir/gradle/checkstyle.gradle"
	apply from: "$rootDir/gradle/codenarc.gradle"

	// IDE support
    apply plugin: 'idea'

	group = 'io.jdev.miniprofiler'
    version = '0.7-SNAPSHOT'

	repositories {
        mavenCentral()
        maven {
            url "https://oss.jfrog.org/repo"
        }
    }

	test {
		systemProperty "geb.build.reportsDir", "$reporting.baseDir/geb"
        if (project.hasProperty('webdriverFirefoxBin')) {
            systemProperty "webdriver.firefox.bin", project.property('webdriverFirefoxBin')
        }
		testLogging {
			exceptionFormat = 'full'
		}
	}

	ext {
		groovyVersion = "2.4.10"
		gebVersion = '1.1.1'
		seleniumVersion = "2.53.1"
		spockVersion = "1.0-groovy-2.4"

		isSnapshot = version.endsWith("-SNAPSHOT")

		publishedModules = [
			':miniprofiler-core',
			':miniprofiler-javaee',
			':miniprofiler-grails',
			':miniprofiler-ratpack',
			':miniprofiler-test-support'
		]
		javaeeTestModules = ['glassfish4', 'wildfly8']
	}

	dependencies {
		testCompile "org.codehaus.groovy:groovy-all:$groovyVersion"
		testCompile "org.spockframework:spock-core:$spockVersion"
	}

	if (path in publishedModules) {
		apply plugin: "base"
		apply plugin: "maven"
		apply plugin: "signing"

		signing {
			sign configurations.archives
			required { !isSnapshot && gradle.taskGraph.hasTask(uploadArchives) }
		}

		task javadocJar(type: Jar, dependsOn: javadoc) {
			classifier = 'javadoc'
			from 'build/docs/javadoc'
		}

		task sourcesJar(type: Jar) {
			from sourceSets.main.allSource
			classifier = 'sources'
		}

		artifacts {
			archives jar
			archives javadocJar
			archives sourcesJar
		}

		apply from: "$rootDir/gradle/pom.gradle"

		uploadArchives { task ->
			repositories.mavenDeployer {
				if(!isSnapshot) {
					beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
				}
				uniqueVersion = false
				gradle.taskGraph.whenReady { taskGraph ->
					if (taskGraph.hasTask(task)) {
						repository(url: "https://oss.sonatype.org/service/local/staging/deploy/maven2/") {
							authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
						}
						snapshotRepository(url: "https://oss.sonatype.org/content/repositories/snapshots/") {
							authentication(userName: sonatypeOssUsername, password: sonatypeOssPassword)
						}
					}
				}
			}
		}

		task uploadSnapshots {
            doLast {
                if (!isSnapshot) {
                    println "Not uploading snapshot as not a snapshot version"
                }
            }
		}
		if(isSnapshot) {
			uploadSnapshots.dependsOn(uploadArchives)
		}

	}

	if(path.startsWith(':integration-test')) {
		dependencies {
			compile project(':miniprofiler-core')
			testCompile project(':miniprofiler-test-support')

			// If using Spock, need to depend on geb-spock
			testCompile "org.gebish:geb-spock:$gebVersion"

			testCompile "org.seleniumhq.selenium:selenium-api:$seleniumVersion"
			testRuntime "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
			// Need a driver implementation
			testRuntime "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
		}
	}
	if(name in javaeeTestModules) {
		dependencies {
			compile project(':miniprofiler-javaee')
		}
	}
}

allprojects {
	task resolveAllDependencies {
		doLast {
			configurations.all { it.resolve() }
		}
	}
}

def isCI = System.getenv("CI")
def buildScansEnabled = isCI || project.hasProperty('enableBuildScans') && project.property('enableBuildScans') == 'true'
if (buildScansEnabled) {
    buildScan {
        licenseAgreementUrl = 'https://gradle.com/terms-of-service'
        licenseAgree = 'yes'

        publishAlwaysIf(project.hasProperty('alwaysPublishBuildScans') && project.property('alwaysPublishBuildScans') == 'true')

        if (isCI) {
            publishOnFailure()
            tag "CI"
            link "Travis Build", "https://travis-ci.org/${System.getenv('TRAVIS_REPO_SLUG')}/builds/${System.getenv('TRAVIS_BUILD_ID')}"
            value "Build Number", System.getenv("TRAVIS_BUILD_NUMBER")
            value "Build ID", System.getenv('TRAVIS_BUILD_ID')
            value "Git Commit ID", System.getenv("TRAVIS_COMMIT")
        } else {
            tag "LOCAL"
            try {
                value "Git Commit ID", 'git rev-parse --verify HEAD'.execute().text.trim()
            } catch (ignore) {
                // ignore
            }
            try {
                def status = 'git status --porcelain'.execute().text
                if (status) {
                    tag "dirty"
                    value "Git Status", status
                }
            } catch (ignore) {
                // ignore
            }
        }
    }
}
