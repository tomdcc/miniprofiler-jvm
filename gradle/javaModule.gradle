/*
 * Copyright 2018 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *    http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'java-library'
apply plugin: 'groovy'
apply from: "$rootDir/gradle/checkstyle.gradle"
apply from: "$rootDir/gradle/codenarc.gradle"
apply plugin: 'idea'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

repositories {
    mavenCentral()
}

dependencies {
    testImplementation libs.groovy
    testImplementation dependencies.create(libs.spock.get()) {
        exclude group: "org.codehaus.groovy", module: "groovy-all"
    }
    testImplementation libs.junitJupiter
    testImplementation dependencies.create(libs.awaitility.get()) {
        exclude group: "org.codehaus.groovy", module: "groovy"
    }
    testRuntimeOnly libs.logback
}

project.tasks.withType(Test).configureEach {
    useJUnitPlatform()

    testLogging {
        exceptionFormat = 'full'
    }

    // Always run tests in the IDE
    if (Boolean.getBoolean('idea.active')) {
        outputs.upToDateWhen { false }
        outputs.doNotCacheIf('Running in IDE') { true }
    }
}

if (!project.path.startsWith(':integration-test:')) {
    sourceSets {
        test {
            compileClasspath += configurations.compileClasspath
            runtimeClasspath += configurations.compileClasspath
        }
    }
}

if (project.path in publishedModules) {
    java {
        withJavadocJar()
        withSourcesJar()
    }
}
